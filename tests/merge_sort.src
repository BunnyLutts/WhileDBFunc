func merge(ptr, left, mid, right) 
{
    var i; 
    var j; 
    var k;
    var n1;
    var n2;
    n1 = mid - left + 1;   
    n2 = right - mid;      
    
    var lptr;
    var rptr;
    lptr = malloc(n1*8);
    rptr = malloc(n2*8);
    
    i = 0;

    while i < n1 do {
        *(lptr + i*8) = *(ptr + left*8 + i*8);
        i = i + 1
    };

    j = 0;

    while j < n2 do {
        *(rptr + j*8) = *(ptr + (mid + 1 + j)*8);
        j = j + 1
    };
    
    i = 0;
    j = 0;
    k = left;

    while i < n1 && j < n2 do {
        if *(lptr + i*8) <= *(rptr + j*8) then 
        {
            *(ptr + k*8) = *(lptr + i*8);
            i = i + 1
        } 
        else 
        {
            *(ptr + k*8) = *(rptr + j*8);
            j = j + 1
        };
        k = k + 1
    };
    
    while i < n1 do {
        *(ptr + k*8) = *(lptr + i*8);
        i = i + 1;
        k = k + 1
    };

    while j < n2 do {
        *(ptr + k*8) = *(rptr + j*8);
        j = j + 1;
        k = k + 1
    }
    

};

func merge_sort(ptr, left, right) 
{
    if left < right then {
        var mid;
        mid = (left + right) / 2;
        merge_sort(ptr, left, mid);          
        merge_sort(ptr, mid + 1, right);   
        merge(ptr, left, mid, right)    
    }
    else{
        var hhh;
        hhh=114514
    }
};

    var n;
    var i;
    var ptr;
    n = 10; 
    
    ptr = malloc(n*8);
    *(ptr + 0) = 38;
    *(ptr + 8) = 27;
    *(ptr + 16) = 43;
    *(ptr + 24) = 3;
    *(ptr + 32) = 9;
    *(ptr + 40) = 82;
    *(ptr + 48) = 10;
    *(ptr + 56) = 5;
    *(ptr + 64) = 4;
    *(ptr + 72) = 7;
    
    merge_sort(ptr, 0, n - 1);
    
    i = 0;
    while i < n do {
        write_int(*(ptr + i*8));
        i = i + 1
    }

    



